From 5b14259250ba281afcf29a752032fe0c8e1b36aa Mon Sep 17 00:00:00 2001
From: Olivier Goffart <ogoffart@woboq.com>
Date: Sat, 1 Sep 2012 18:17:14 +0200
Subject: [PATCH] Add a hook in the ASTConsumer to be able to skip function
 boddy

---
 include/clang/AST/ASTConsumer.h |  5 +++++
 include/clang/Parse/Parser.h    |  3 ++-
 lib/Parse/ParseStmt.cpp         | 12 ++++++++----
 3 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/include/clang/AST/ASTConsumer.h b/include/clang/AST/ASTConsumer.h
index 8418b5a..208fc52 100644
--- a/include/clang/AST/ASTConsumer.h
+++ b/include/clang/AST/ASTConsumer.h
@@ -26,6 +26,7 @@ namespace clang {
   class VarDecl;
   class FunctionDecl;
   class ImportDecl;
+  class Decl;
 
 /// ASTConsumer - This is an abstract interface that should be implemented by
 /// clients that read ASTs.  This abstraction layer allows the client to be
@@ -125,6 +126,10 @@ public:
   /// PrintStats - If desired, print any statistics.
   virtual void PrintStats() {}
 
+  /// This callback is called if the PArser was initialized with
+  /// SkipFunctionBodies.  Return true if the function should be skipped
+  virtual bool shouldSkipFunctionBody(Decl *D) { return true; }
+
   // Support isa/cast/dyn_cast
   static bool classof(const ASTConsumer *) { return true; }
 };
diff --git a/include/clang/Parse/Parser.h b/include/clang/Parse/Parser.h
index 20b13ba..86e5375 100644
--- a/include/clang/Parse/Parser.h
+++ b/include/clang/Parse/Parser.h
@@ -1621,9 +1621,10 @@ private:
 
   /// \brief When in code-completion, skip parsing of the function/method body
   /// unless the body contains the code-completion point.
+  /// If not in code-completion, skip if ASTConsumer::shouldSkipFunctionBody returns true
   ///
   /// \returns true if the function body was skipped.
-  bool trySkippingFunctionBody();
+  bool trySkippingFunctionBody(Decl *Decl);
 
   bool ParseImplicitInt(DeclSpec &DS, CXXScopeSpec *SS,
                         const ParsedTemplateInfo &TemplateInfo,
diff --git a/lib/Parse/ParseStmt.cpp b/lib/Parse/ParseStmt.cpp
index 776423c..6845c5d 100644
--- a/lib/Parse/ParseStmt.cpp
+++ b/lib/Parse/ParseStmt.cpp
@@ -21,6 +21,7 @@
 #include "clang/Basic/Diagnostic.h"
 #include "clang/Basic/PrettyStackTrace.h"
 #include "clang/Basic/SourceManager.h"
+#include "clang/AST/ASTConsumer.h"
 #include "llvm/ADT/SmallString.h"
 using namespace clang;
 
@@ -1933,7 +1934,7 @@ Decl *Parser::ParseFunctionStatementBody(Decl *Decl, ParseScope &BodyScope) {
   assert(Tok.is(tok::l_brace));
   SourceLocation LBraceLoc = Tok.getLocation();
 
-  if (SkipFunctionBodies && trySkippingFunctionBody()) {
+  if (SkipFunctionBodies && trySkippingFunctionBody(Decl)) {
     BodyScope.Exit();
     return Actions.ActOnFinishFunctionBody(Decl, 0);
   }
@@ -1975,7 +1976,7 @@ Decl *Parser::ParseFunctionTryBlock(Decl *Decl, ParseScope &BodyScope) {
   else
     Actions.ActOnDefaultCtorInitializers(Decl);
 
-  if (SkipFunctionBodies && trySkippingFunctionBody()) {
+  if (SkipFunctionBodies && trySkippingFunctionBody(Decl)) {
     BodyScope.Exit();
     return Actions.ActOnFinishFunctionBody(Decl, 0);
   }
@@ -1994,12 +1995,15 @@ Decl *Parser::ParseFunctionTryBlock(Decl *Decl, ParseScope &BodyScope) {
   return Actions.ActOnFinishFunctionBody(Decl, FnBody.take());
 }
 
-bool Parser::trySkippingFunctionBody() {
+bool Parser::trySkippingFunctionBody(Decl *Decl) {
   assert(Tok.is(tok::l_brace));
   assert(SkipFunctionBodies &&
          "Should only be called when SkipFunctionBodies is enabled");
 
-  // We're in code-completion mode. Skip parsing for all function bodies unless
+  if (!Actions.getASTConsumer().shouldSkipFunctionBody(Decl))
+      return false;
+
+  // Skip parsing for all function bodies unless
   // the body contains the code-completion point.
   TentativeParsingAction PA(*this);
   ConsumeBrace();
-- 
1.7.12.1

