From 49818ff15fd87c303f6b8e959db19d7b7641da88 Mon Sep 17 00:00:00 2001
From: Olivier Goffart <ogoffart@woboq.com>
Date: Sat, 1 Sep 2012 18:17:14 +0200
Subject: [PATCH] Add a hook in the ASTConsumer to be able to skip function
 body

---
 include/clang/AST/ASTConsumer.h |  5 +++++
 include/clang/Parse/Parser.h    |  3 ++-
 lib/Parse/ParseStmt.cpp         | 10 +++++++---
 3 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/include/clang/AST/ASTConsumer.h b/include/clang/AST/ASTConsumer.h
index 37b0740..c366024 100644
--- a/include/clang/AST/ASTConsumer.h
+++ b/include/clang/AST/ASTConsumer.h
@@ -27,6 +27,7 @@ namespace clang {
   class VarDecl;
   class FunctionDecl;
   class ImportDecl;
+  class Decl;
 
 /// ASTConsumer - This is an abstract interface that should be implemented by
 /// clients that read ASTs.  This abstraction layer allows the client to be
@@ -130,6 +131,10 @@ public:
 
   /// PrintStats - If desired, print any statistics.
   virtual void PrintStats() {}
+
+  /// This callback is called for each function if the Parser was initialized
+  /// with SkipFunctionBodies.  Returns true if the function should be skipped
+  virtual bool shouldSkipFunctionBody(Decl *D) { return true; }
 };
 
 } // end namespace clang.
diff --git a/include/clang/Parse/Parser.h b/include/clang/Parse/Parser.h
index c433344..e5184b8 100644
--- a/include/clang/Parse/Parser.h
+++ b/include/clang/Parse/Parser.h
@@ -1631,9 +1631,10 @@ private:
 
   /// \brief When in code-completion, skip parsing of the function/method body
   /// unless the body contains the code-completion point.
+  /// If not in code-completion, skip if ASTConsumer::shouldSkipFunctionBody returns true
   ///
   /// \returns true if the function body was skipped.
-  bool trySkippingFunctionBody();
+  bool trySkippingFunctionBody(Decl *Decl);
 
   bool ParseImplicitInt(DeclSpec &DS, CXXScopeSpec *SS,
                         const ParsedTemplateInfo &TemplateInfo,
diff --git a/lib/Parse/ParseStmt.cpp b/lib/Parse/ParseStmt.cpp
index f604e03..2c24894 100644
--- a/lib/Parse/ParseStmt.cpp
+++ b/lib/Parse/ParseStmt.cpp
@@ -21,6 +21,7 @@
 #include "clang/Basic/Diagnostic.h"
 #include "clang/Basic/PrettyStackTrace.h"
 #include "clang/Basic/SourceManager.h"
+#include "clang/AST/ASTConsumer.h"
 #include "llvm/ADT/SmallString.h"
 using namespace clang;
 
@@ -2003,7 +2004,7 @@ Decl *Parser::ParseFunctionStatementBody(Decl *Decl, ParseScope &BodyScope) {
   assert(Tok.is(tok::l_brace));
   SourceLocation LBraceLoc = Tok.getLocation();
 
-  if (SkipFunctionBodies && trySkippingFunctionBody()) {
+  if (SkipFunctionBodies && trySkippingFunctionBody(Decl)) {
     BodyScope.Exit();
     return Actions.ActOnFinishFunctionBody(Decl, 0);
   }
@@ -2045,7 +2046,7 @@ Decl *Parser::ParseFunctionTryBlock(Decl *Decl, ParseScope &BodyScope) {
   else
     Actions.ActOnDefaultCtorInitializers(Decl);
 
-  if (SkipFunctionBodies && trySkippingFunctionBody()) {
+  if (SkipFunctionBodies && trySkippingFunctionBody(Decl)) {
     BodyScope.Exit();
     return Actions.ActOnFinishFunctionBody(Decl, 0);
   }
@@ -2064,11 +2065,14 @@ Decl *Parser::ParseFunctionTryBlock(Decl *Decl, ParseScope &BodyScope) {
   return Actions.ActOnFinishFunctionBody(Decl, FnBody.take());
 }
 
-bool Parser::trySkippingFunctionBody() {
+bool Parser::trySkippingFunctionBody(Decl *Decl) {
   assert(Tok.is(tok::l_brace));
   assert(SkipFunctionBodies &&
          "Should only be called when SkipFunctionBodies is enabled");
 
+  if (!Actions.getASTConsumer().shouldSkipFunctionBody(Decl))
+      return false;
+
   if (!PP.isCodeCompletionEnabled()) {
     ConsumeBrace();
     SkipUntil(tok::r_brace, /*StopAtSemi=*/false, /*DontConsume=*/false);
-- 
1.7.12.1

